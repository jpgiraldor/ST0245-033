public int maxSpan(int[] nums) {

  int maxSpan = 0;

  for (int i = 0 ; i < nums.length ; i++) {
    int currentSpan = 0;
    for (int j = i ; j < nums.length ; j++) {
      if (nums[i] == nums[j]) {
        currentSpan = j - i + 1;
      }
      if (currentSpan > maxSpan) {
        maxSpan = currentSpan;
      }
    }
  }
  return maxSpan;
}

public int[] fix34(int[] nums) {

  int numsN [] = new int[nums.length];

  for (int i = 0 ; i < nums.length ; i++) {
    numsN[i] = nums[i];
    if (nums[i] == 3) {
      for (int j = 0 ; j < nums.length ; j++) {
        if (nums[j] == 4) {
          if (j < i) {
            numsN[j] = nums[i+1];
          }
          numsN[i + 1] = 4;
          nums[j] = nums[i + 1];
          i++;
          break;
        }
      }
    }
  }
  return numsN;
}
public int[] fix45(int[] nums) {
        int[] nums2 = new int[nums.length + 1];
        int posCinco = 0;
        int sW = 0;
        nums2[0] = 9;
        int cambio = 0;
        for (int i = 1 ; i < nums2.length ; i++) {
            nums2[i] = nums[cambio];
            cambio ++;
        }
        for(int i = 0; i < nums2.length - 1 ; i++){
            if (nums2[i] == 4){
                for(int j = posCinco; j < nums2.length ; j++){
                    if(nums2[j] == 5 && nums2[j - 1] != 4){
                        posCinco = j;
                        sW = nums2[i + 1];
                        nums2[i + 1] = nums2[j];
                        nums2[j] = sW;
                        break;
                    }
                }
            }
        }
        cambio = 1;
        for (int i = 0 ; i < nums.length ; i++) {
            nums[i] = nums2[cambio];
            cambio ++;
        }
        return nums;
    }

    public boolean canBalance(int[] nums) {
      int sumT = 0;
      for(int i = 0; i < nums.length; i ++){
        sumT = sumT + nums[i];
      }
      if (sumT%2 == 0){
        int k = 0;
        for(int i = 0; k < sumT/2; i++){
          k = k + nums[i];
        }
        if(k == sumT/2){
          return true;
        }
      }
      return false;
    }

    public boolean linearIn(int[] outer, int[] inner) {
      int posOuter = 0;
      int recorrido = 0;
      for(int i = 0; i < inner.length; i++){
        for(int j = posOuter; j < outer.length; j++){
          if(outer[j] == inner[i]){
            recorrido ++;
            posOuter = j;
            break;
          }
        }
      }
      return recorrido == inner.length;
    }
